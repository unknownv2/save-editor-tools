using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LA_Noire_Decrypter
{
    class LANoire
    {
        public byte[] newKey;
        public static byte[] cipher1 = new byte[] { 0x52, 0x9, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB, 0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB, 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0xB, 0x42, 0xFA, 0xC3, 0x4E, 0x8, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25, 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92, 0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84, 0x90, 0xD8, 0xAB, 0x0, 0x8C, 0xBC, 0xD3, 0xA, 0xF7, 0xE4, 0x58, 0x5, 0xB8, 0xB3, 0x45, 0x6, 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0xF, 0x2, 0xC1, 0xAF, 0xBD, 0x3, 0x1, 0x13, 0x8A, 0x6B, 0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73, 0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E, 0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0xE, 0xAA, 0x18, 0xBE, 0x1B, 0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4, 0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x7, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F, 0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0xD, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF, 0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2B, 0x4, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0xC, 0x7D };
        public static byte[] cipher2 = new byte[] { 0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x1, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0x4, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x5, 0x9A, 0x7, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75, 0x9, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x0, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x2, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0xC, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0xB, 0xDB, 0xE0, 0x32, 0x3A, 0xA, 0x49, 0x6, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x8, 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x3, 0xF6, 0xE, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 0x8C, 0xA1, 0x89, 0xD, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0xF, 0xB0, 0x54, 0xBB, 0x16, 0x52, 0x9, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB, 0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB, 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0xB, 0x42, 0xFA, 0xC3, 0x4E, 0x8, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25, 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92, 0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84, 0x90, 0xD8, 0xAB, 0x0, 0x8C, 0xBC, 0xD3, 0xA, 0xF7, 0xE4, 0x58, 0x5, 0xB8, 0xB3, 0x45, 0x6, 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0xF, 0x2, 0xC1, 0xAF, 0xBD, 0x3, 0x1, 0x13, 0x8A, 0x6B, 0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73, 0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E, 0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0xE, 0xAA, 0x18, 0xBE, 0x1B, 0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4, 0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x7, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F, 0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0xD, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF, 0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2B, 0x4, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0xC, 0x7D }; // Held in r8
            

        public void TransformKey(byte[] startKey)
        {
            //byte[] startKey = new byte[] { 0x72, 0x65, 0x24, 0x55, 0x70, 0x68, 0x24, 0x74, 0x37, 0x76, 0x45, 0x43, 0x75, 0x66, 0x45, 0x6A, 0x65, 0x79, 0x34, 0x5F, 0x68, 0x65, 0x33, 0x65, 0x32, 0x61, 0x6A, 0x75, 0x77, 0x72, 0x65, 0x66 };
            byte[] secondKey = new byte[] { 0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x1, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0, 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0x4, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x5, 0x9A, 0x7, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75, 0x9, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x0, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF, 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x2, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2, 0xCD, 0xC, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0xB, 0xDB, 0xE0, 0x32, 0x3A, 0xA, 0x49, 0x6, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x8, 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x3, 0xF6, 0xE, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E, 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 0x8C, 0xA1, 0x89, 0xD, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0xF, 0xB0, 0x54, 0xBB, 0x16, 0x52, 0x9, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB, 0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB, 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0xB, 0x42, 0xFA, 0xC3, 0x4E, 0x8, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25, 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92, 0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84, 0x90, 0xD8, 0xAB, 0x0, 0x8C, 0xBC, 0xD3, 0xA, 0xF7, 0xE4, 0x58, 0x5, 0xB8, 0xB3, 0x45, 0x6, 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0xF, 0x2, 0xC1, 0xAF, 0xBD, 0x3, 0x1, 0x13, 0x8A, 0x6B, 0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73, 0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E, 0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0xE, 0xAA, 0x18, 0xBE, 0x1B, 0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4, 0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x7, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F, 0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0xD, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF, 0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2B, 0x4, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0xC, 0x7D }; // Held in r8
            byte[] thirdKey = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 0xD8, 0x00, 0x00, 0x00, 0xAB, 0x00, 0x00, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x9A, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x5E, 0x00, 0x00, 0x00, 0xBC, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0xD4, 0x00, 0x00, 0x00, 0xB3, 0x00, 0x00, 0x00, 0x7D, 0x00, 0x00, 0x00, 0xFA, 0x00, 0x00, 0x00, 0xEF, 0x00, 0x00, 0x00, 0xC5, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0xE4, 0x00, 0x00, 0x00, 0xD3, 0x00, 0x00, 0x00, 0xBD, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0xC2, 0x00, 0x00, 0x00, 0x9F, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0xCC, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xE8, 0x00, 0x00, 0x00, 0xCB, 0x00, 0x00, 0x00, 0x8D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x1B }; // stored in r5
            newKey = new byte[0xF0];
            int keyWordCount = 8;
            
            // Copy the start key into the new key
            for (int i = 0; i < keyWordCount << 2; i++)
            {
                newKey[i] = startKey[i];
            }

            uint r11 = (uint)keyWordCount;
            uint r10 = 0xE;
            uint r9 = 4;
            uint r8 = r10 + 1;
            uint r7 = r8 * r9;
            uint r3 = 0;
            uint r30 = 0;
            uint r29 = 0;
            uint r28 = 0;

            if (r11 >= r7)
                return;

            r10 = r11 << 2;

            int r6 = 0x20 - 4; // This is the index to get the transform from

            while (true)
            {
                r9 = 8;
                r7 = RotateLeftWord(r11, 1);
                r10 = (uint)((newKey[r6] << 24) | (newKey[r6 + 1] << 16) | (newKey[r6 + 2] << 8) | (newKey[r6 + 3]));
                r7--;
                r3 = r11 / r9;
                r30 = r9 & ~r7;
                r3 = r3 * r9;
                r7 = r11 - r3;

                if (r7 != 0)
                {
                    if (r7 != 4)
                    { }
                    else
                    {
                        r7 = r10 >> 24;
                        r3 = (r10 & 0xFF0000) >> 16;
                        r30 = (r10 & 0xFF00) >> 8;
                        r10 = r10 & 0xFF;
                        r7 = secondKey[r7];
                        r3 = secondKey[r3];
                        r7 = RotateLeftWord(r7, 8);
                        r30 = secondKey[r30];
                        r10 = secondKey[r10];
                        r7 = r3 | r7;
                        r3 = r7 << 8;
                        r7 = r3 | r30;
                        r3 = r7 << 8;
                        r10 = r3 | r10;
                    }
                }
                else
                {
                    r7 = r10 & 0xFF;
                    r3 = r10 >> 24;
                    r30 = (r10 & 0xFF0000) >> 16;
                    r29 = (r10 & 0xFF00) >> 8;
                    r10 = RotateLeftWord(r11, 1);
                    r7 = secondKey[r7];
                    r28 = r11 / r9;
                    r3 = secondKey[r3];
                    r10--;
                    r7 = RotateLeftWord(r7, 8);
                    r30 = secondKey[r30];
                    r28 = r28 << 2;
                    r29 = secondKey[r29];
                    r7 = r3 | r7;
                    r3 = r9 & ~r10;
                    r10 = r7 << 8;
                    r3 = r10 | r30;
                    r7 = (uint)((thirdKey[r28] << 24) | (thirdKey[r28 + 1] << 16) | (thirdKey[r28 + 2] << 8) | (thirdKey[r28 + 3]));
                    r10 = r3 << 8;
                    r3 = r10 | r29;
                    r10 = r3 ^ r7;
                }
                r9 = r11 - r9;
                r11 = r11 + 1;
                r7 = r9 << 2;
                r3 = (uint)((newKey[r7] << 24) | (newKey[r7 + 1] << 16) | (newKey[r7 + 2] << 8) | (newKey[r7 + 3]));
                r10 = r3 ^ r10;
                r6 = r6 + 4;
                newKey[r6] = (byte)((r10 & 0xFF000000) >> 24);
                newKey[r6 + 1] = (byte)((r10 & 0xFF0000) >> 16);
                newKey[r6 + 2] = (byte)((r10 & 0xFF00) >> 8);
                newKey[r6 + 3] = (byte)(r10 & 0xFF);
                r9 = 4;
                r10 = 0xE;
                r7 = r10 + 1;
                r3 = r7 * r9;
                if (r11 >= r3)
                    break;
            }
        }

        public byte[] DescrambleBytes(byte[] data)
        {
            byte[] outb = new byte[0x10];
            outb[0] = data[0];
            outb[1] = data[0xD];
            outb[2] = data[0xa];
            outb[3] = data[7];
            outb[4] = data[4];
            outb[5] = data[1];
            outb[6] = data[0xe];
            outb[7] = data[0xB];
            outb[8] = data[8];
            outb[9] = data[5];
            outb[0xa] = data[2];
            outb[0xb] = data[0xf];
            outb[0xc] = data[0xc];
            outb[0xd] = data[9];
            outb[0xe] = data[6];
            outb[0xf] = data[3];
            return outb;
        }

        public byte[] ScrambleBytes(byte[] data)
        {
            byte[] outb = new byte[0x10];
            outb[0] = data[0];
            outb[1] = data[5];
            outb[2] = data[0xA];
            outb[3] = data[0xF];
            outb[4] = data[4];
            outb[5] = data[9];
            outb[6] = data[0xE];
            outb[7] = data[3];
            outb[8] = data[8];
            outb[9] = data[0xd];
            outb[0xA] = data[2];
            outb[0xB] = data[7];
            outb[0xC] = data[0xC];
            outb[0xD] = data[1];
            outb[0xE] = data[6];
            outb[0xF] = data[0xB];
            return outb;
        }

        public byte[] Encrypt(byte[] data, byte[] key)
        {
            TransformKey(key);
            byte[] saveStart = new byte[0x10];
            Array.Copy(data, 0, saveStart, 0, 0x10);

            saveStart = XorDecryptBlock(0, saveStart);

            for (int i = 1; i < 0xE; i++)
            {
                saveStart = Encipher(saveStart);
                saveStart = ScrambleBytes(saveStart);
                saveStart = TransformBlockEnc(saveStart); //TODO: Reverse the encryption transform, it's pretty retarded.  located at 0x8261C918
            }
            return saveStart;
        }

        public byte[] Decrypt(byte[] data, byte[] key)
        {
            TransformKey(key); // Calculate the keys
            byte[] saveStart = new byte[0x10]; // Create the copy of the 
            Array.Copy(data, saveStart, 0x10); // Copy the first 0x10 bytes of the save
           
            saveStart = DecryptBlock(saveStart);
            byte[] keyfinal = new byte[data.Length];
            byte[] decrypted = new byte[data.Length];
            Array.Copy(saveStart, 0, decrypted, 0, 0x10);
            Array.Copy(saveStart, 0, keyfinal, 0, 0x10);
            for (int i = 0; i < (data.Length / 0x10) - 1; i++)
            {
                byte[] currentBlock = new byte[0x10];
                Array.Copy(data, 0x10 + (i * 0x10), currentBlock, 0, 0x10);
                currentBlock = DecryptBlock(currentBlock);
                Array.Copy(currentBlock, 0, keyfinal, 0x10 + (i * 0x10), 0x10);
                for (int x = 0; x < 0x10; x++)
                {
                    decrypted[(i * 0x10) + x + 0x10] = (byte)(data[(i * 0x10) + x] ^ keyfinal[(i * 0x10) + 0x10 + x]);
                }
            }
            return decrypted;
        }

        public byte[] DecryptBlock(byte[] encryptedData)
        {
            // Do le decipherage, descrambling, and xor shit with 0xE as the key ID
            byte[] decryptedData = Decipher(DescrambleBytes(XorDecryptBlock(0xE, encryptedData)));

            for (int i = 0xD; i > 0; i--)
            {
                decryptedData = Decipher(DescrambleBytes(TransformBlock(XorDecryptBlock(i, decryptedData))));
            }

            decryptedData = XorDecryptBlock(0, decryptedData);
            return decryptedData;
        }

        public byte[] XorDecryptBlock(int keyNum, byte[] data)
        {
            byte[] outb = new byte[0x10];
            int keyIndex = keyNum * 0x10;
            for (int i = 0; i < 0x10; i++)
            {
                outb[i] = (byte)(data[i] ^ newKey[keyIndex + i]);
            }
            return outb;
        }

        public byte[] Decipher(byte[] data)
        {
            byte[] outb = new byte[0x10];
            for (int i = 0; i < data.Length; i++)
            {
                outb[i] = cipher1[data[i]];
            }
            return outb;
        }

        public byte[] Encipher(byte[] data)
        {
            byte[] outb = new byte[0x10];
            for (int i = 0; i < data.Length; i++)
            {
                outb[i] = cipher2[data[i]];
            }
            return outb;
        }

        public byte TransformByte(byte transform, byte b)
        {
            byte r3 = 0;
            byte r11 = transform;
            for (int i = 0; i < 8; i++)
            {
                byte r10 = (byte)(b & 1);
                if (r10 != 0)
                {
                    r10 = (byte)(r3 & 0xFF);
                    byte r9 = (byte)(r11 & 0xFF);
                    r3 = (byte)(r10 ^ r9);
                }
                r10 = (byte)(r11 & 0x80);
                r11 = (byte)(r11 & 0xFF);
                r11 = (byte)((r11 & 0x7F) << 1);
                if (r10 != 0)
                {
                    r11 ^= 0x1B;
                }
                b = (byte)(RotateLeftWord((uint)b, 31) & 0x7F);
            }
            return r3;
        }

        public byte[] TransformBlock(byte[] data)
        {
            for (int i = 0; i < 4; i++)
            {
                byte r31 = data[(i * 4) + 3];
                byte r30 = data[(i * 4)];
                byte r29 = data[(i * 4) + 1];
                byte r28 = data[(i * 4) + 2];
                byte r27 = TransformByte(9, r31); // Transform the first byte
                byte r26 = TransformByte(0xD, r28); // Transform the second byte
                byte r25 = TransformByte(0xB, r29); // Transform the third byte
                byte r10 = TransformByte(0xE, r30); // Transform the fourth byte
                byte r11 = (byte)(r27 ^ r26); // I don't really know what's going on here, but I trust IDA
                byte r9 = (byte)(r11 ^ r25); // We're down to single digit registers, that means we're almost done, right?
                byte r8 = (byte)(r9 ^ r10); // You know what they say, the more you xor the xor you more.
                data[(i * 4)] = r8;
                r27 = TransformByte(0xD, r31);
                r26 = TransformByte(0xB, r28);
                r25 = TransformByte(0xE, r29);
                r9 = TransformByte(9, r30);
                r10 = (byte)(r27 ^ r26);
                r8 = (byte)(r10 ^ r25);
                r11 = (byte)(r8 ^ r9);
                data[(i * 4) + 1] = r11;
                r27 = TransformByte(0xB, r31);
                r26 = TransformByte(0xE, r28);
                r25 = TransformByte(9, r29);
                r8 = TransformByte(0xD, r30);
                r9 = (byte)(r27 ^ r26);
                byte r3 = (byte)(r9 ^ r25);
                r11 = (byte)(r3 ^ r8);
                data[(i * 4) + 2] = r11;
                r31 = TransformByte(0xE, r31);
                r28 = TransformByte(9, r28);
                r29 = TransformByte(0xD, r29);
                r8 = TransformByte(0xB, r30);
                r9 = (byte)(r31 ^ r28);
                byte r4 = (byte)(r9 ^ r29);
                r3 = (byte)(r4 ^ r8);
                r11 = (byte)(r3 & 0xFF);
                data[(i * 4) + 3] = r11;
            }
            return data;
        }

        public byte[] TransformBlockEnc(byte[] data)
        {
            byte r10 = 0x1B;
            for (int i = 0; i < 4; i++)
            {
                byte r8 = data[(i << 2) + 1];
                byte r7 = data[(i << 2)];
                byte r6 = (byte)(r8 & 0x80);
                byte r5 = data[(i << 2) + 2];
                byte r4 = (byte)(r7 & 0x80);
                byte r31 = data[(i << 2) + 3];
                //r6 = (byte)(0 - (int)r6);
                /*long r6l = (long)(0 - (long)r6);
                r6l = r6l - r6l;*/
                if (r6 == 0x80)
                    r6 = 0xFF;
                byte r30 = (byte)(r5 & 0x80);
                //r6 = (byte)((int)r6 - (int)r6);
                //r6 = (byte)(r6l & 0xFF);
                //r4 = (byte)(0 - (int)r4);
                byte r29 = (byte)(r31 & 0x80);
                //r4 = (byte)((int)r4 - (int)r4);
                if (r4 == 0x80)
                    r4 = 0xFF;
                //r30 = (byte)(0 - (int)r30);
                byte r28 = r8;
                //r30 = (byte)((int)r30 - (int)r30);
                if (r30 == 0x80)
                    r30 = 0xFF;
                //r29 = (byte)(0 - (int)r29);
                r4 = (byte)(r4 & r10);
                byte r26 = r5;
                //r29 = (byte)((int)r29 - (int)r29);
                if (r29 == 0x80)
                    r29 = 0xFF;
                byte r24 = (byte)(r7 ^ r8);
                r28 = (byte)(r5 ^ r28);
                r30 = (byte)(r30 & r10);
                r26 = (byte)(r31 ^ r26);
                byte r23 = r4;
                r29 = (byte)(r29 & r10);
                byte r27 = r7;
                r24 = (byte)(r24 << 1);
                r6 = (byte)(r6 & r10);
                byte r22 = r30;
                r28 = (byte)(r28 << 1);
                r27 = (byte)(r31 ^ r27);
                r26 = (byte)(r26 << 1);
                byte r21 = r29;
                r24 = (byte)(r24 ^ r23);
                r23 = r6;
                r6 = (byte)(r6 & 0xFF);
                r28 = (byte)(r28 ^ r22);
                r26 = (byte)(r26 ^ r21);
                r30 = (byte)(r30 & 0xFF);
                r27 = (byte)(r27 << 1);
                r29 = (byte)(r29 & 0xFF);
                r6 = (byte)(r28 ^ r6);
                r24 = (byte)(r24 ^ r23);
                r30 = (byte)(r26 ^ r30);
                r4 = (byte)(r4 & 0xFF);
                r29 = (byte)(r27 ^ r29);
                r6 = (byte)(r6 ^ r31);
                byte r25 = r31;
                r26 = (byte)(r24 ^ r31);
                r23 = r31;
                r31 = (byte)(r30 ^ r31);
                r4 = (byte)(r29 ^ r4);
                r6 = (byte)(r6 ^ r5);
                r26 = (byte)(r26 ^ r5);
                r5 = (byte)(r4 ^ r5);
                r31 = (byte)(r31 ^ r8);
                r4 = r8;
                r27 = (byte)(r26 ^ r8);
                r25 = r8;
                r6 = (byte)(r6 ^ r7);
                r31 = (byte)(r31 ^ r7);
                r8 = r7;
                data[(i << 2) + 1] = r6;
                r28 = r7;
                r7 = (byte)(r5 ^ r4);
                r30 = (byte)(r27 & 0xFF);
                r6 = (byte)(r7 ^ r8);
                r31 = (byte)(r31 & 0xFF);
                data[(i << 2)] = r30;
                r5 = (byte)(r6 & 0xFF);
                data[(i << 2) + 2] = r31;
                data[(i << 2) + 3] = r5;
            }
            return data;
        }

        private uint RotateLeftWord(uint word, int bits)
        {
            return (word << bits) | (word >> (32 - bits));
        }

        private uint RotateRightWord(uint word, int bits)
        {
            return (word >> bits) | (word << (32 - bits));
        }
    }
}
