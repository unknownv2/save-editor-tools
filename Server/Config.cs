//#define XBOX9

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Xml.XPath;
using Horizon.Properties;
using System.Security.Cryptography;
using System.Collections.Specialized;
using System.Windows.Forms;

namespace Horizon.Server
{
    internal static class Config
    {
        // Static settings
        internal static readonly string siteName = "https://github.com/unknownv2";            
        internal static byte[] clientIV;
        internal static readonly string clientVersion = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString();
        internal static string devTag = String.Empty;
        internal static bool enableCompression = false;
        internal static readonly string serverURL = "https://github.com/unknownv2";
        internal static byte[] clientAES
        {
            get { return Functions.Global.hexStringToArray(_clientAES.Reverse()); }
            set { _clientAES = Encoding.ASCII.GetString(value).ToHexString().Reverse(); }
        }
        #if PNET
            internal static readonly string baseURL = serverURL + "client/v2/development/";
            internal static readonly string clientSalt = "InM(gVgtWPA(Q+X";
            private static string _clientAES = "da200b05de93b6b75356c4ceaddc5fb50a01f51b00d92b513950f036eaec239f";
#else
        internal static readonly string baseURL = serverURL + "client/v2/production/";
        internal static readonly string clientSalt = "9+2@Zl~>PNouVbO";
        internal static string _clientAES = "f7289061fecff083a5d70619c790e6f02d37fd24687fe602615ff10a594d341f";
#endif

            // Initiate settings needed for statup and server connection.
        private static Dictionary<string, object> settings = new Dictionary<string, object>();
        internal static void initSettings()
        {
#if XBOX9
            ServicePointManager.ServerCertificateValidationCallback += delegate { return true; };
#endif
            clientIV = Security.makeIV();
            addSetting("user_group", "Register");
            loadConKeys();
            loadDotNETSettings();
        }

        // Load the CON resigning keys into the dictionary.
        private static void loadConKeys()
        {
            addSetting("con_exponent", new byte[4] { 0x00, 0x01, 0x00, 0x01 });
            addSetting("con_modulus", new byte[128] {
                0xA3, 0x1D, 0x6C, 0xE5, 0xFA, 0x95, 0xFD, 0xE8,
                0x90, 0x21, 0xFA, 0xD1, 0x0C, 0x64, 0x19, 0x2B,
                0x86, 0x58, 0x9B, 0x17, 0x2B, 0x10, 0x05, 0xB8,
                0xD1, 0xF8, 0x4C, 0xEF, 0x53, 0x4C, 0xD5, 0x4E,
                0x5C, 0xAE, 0x86, 0xEF, 0x92, 0x7B, 0x90, 0xD1,
                0xE0, 0x62, 0xFD, 0x7C, 0x54, 0x55, 0x9E, 0xE0,
                0xE7, 0xBE, 0xFA, 0x3F, 0x9E, 0x15, 0x6F, 0x6C,
                0x38, 0x4E, 0xAF, 0x07, 0x0C, 0x61, 0xAB, 0x51,
                0x5E, 0x23, 0x53, 0x14, 0x18, 0x88, 0xCB, 0x6F,
                0xCB, 0xC5, 0xD6, 0x30, 0xF4, 0x06, 0xED, 0x24,
                0x23, 0xEF, 0x25, 0x6D, 0x00, 0x91, 0x77, 0x24,
                0x9B, 0xE5, 0xA3, 0xC0, 0x27, 0x90, 0xC2, 0x97,
                0xF7, 0x74, 0x9D, 0x6F, 0x17, 0x83, 0x7E, 0xB5,
                0x37, 0xDE, 0x51, 0xE8, 0xD7, 0x1C, 0xE1, 0x56,
                0xD9, 0x56, 0xC8, 0xC3, 0xC3, 0x20, 0x9D, 0x64,
                0xC3, 0x2F, 0x8C, 0x91, 0x92, 0x30, 0x6F, 0xDB 
            });
            addSetting("con_p", new byte[64] {
                0xCC, 0xE7, 0x5D, 0xFE, 0x72, 0xB6, 0xFD, 0xE7,
                0x1D, 0xE3, 0x1A, 0x0E, 0xAC, 0x33, 0x7A, 0xB9,
                0x21, 0xE8, 0x8A, 0x84, 0x9B, 0xDA, 0x9F, 0x1E,
                0x58, 0x34, 0x68, 0x7A, 0xB1, 0x1D, 0x7E, 0x1C,
                0x18, 0x52, 0x65, 0x7B, 0x97, 0x8E, 0xA7, 0x6A,
                0x9D, 0xEE, 0x5A, 0x77, 0x52, 0x3B, 0x71, 0x8F,
                0x33, 0xD0, 0x49, 0x5E, 0xC3, 0x30, 0x39, 0x72,
                0x36, 0xBF, 0x1D, 0xD9, 0xF2, 0x24, 0xE8, 0x71
            });
            addSetting("con_q", new byte[64] {
                0xCB, 0xCA, 0x58, 0x74, 0xD4, 0x03, 0x62, 0x93,
                0x06, 0x50, 0x1F, 0x42, 0xF6, 0xAA, 0x59, 0x36,
                0xA7, 0xA1, 0xF3, 0x97, 0x5C, 0x9A, 0xC8, 0x6A,
                0x27, 0xCF, 0x85, 0x05, 0x2A, 0x66, 0x41, 0x6A,
                0x7F, 0x2F, 0x84, 0xC8, 0x18, 0x13, 0xC6, 0x1D,
                0x8D, 0xC7, 0x32, 0x2F, 0x72, 0x19, 0x3F, 0xA4,
                0xED, 0x71, 0xE7, 0x61, 0xC0, 0xCF, 0x61, 0xAE,
                0x8B, 0xA0, 0x68, 0xA7, 0x7D, 0x83, 0x23, 0x0B
            });
            addSetting("con_dp", new byte[64] {
                0x4C, 0xCA, 0x74, 0xE6, 0x74, 0x35, 0x72, 0x48,
                0x58, 0x62, 0x11, 0x14, 0xE8, 0xA2, 0x4E, 0x5E,
                0xED, 0x7F, 0x49, 0xD2, 0x52, 0xDA, 0x87, 0x01,
                0x87, 0x4A, 0xF4, 0xD0, 0xEE, 0x69, 0xC0, 0x26,
                0x65, 0x53, 0x13, 0xE7, 0x52, 0xB0, 0x4A, 0xBB,
                0xE1, 0x3E, 0x3F, 0xB7, 0x32, 0x21, 0x46, 0xF8,
                0xC5, 0x11, 0x4D, 0x3D, 0xEF, 0x66, 0xB6, 0x50,
                0xC0, 0x85, 0xB5, 0x79, 0x45, 0x8F, 0x61, 0x71
            });
            addSetting("con_dq", new byte[64] {
                0xAF, 0xDC, 0x46, 0xE7, 0x52, 0x8A, 0x35, 0x47,
                0xA1, 0x1C, 0x05, 0x4E, 0x39, 0x24, 0x99, 0xE6,
                0x43, 0x54, 0xCB, 0xAB, 0xE3, 0xDB, 0x22, 0x76,
                0x11, 0x32, 0xD0, 0x9C, 0xBB, 0x91, 0x10, 0x84,
                0x81, 0x8B, 0x15, 0x2F, 0xC3, 0x2F, 0x55, 0x38,
                0xED, 0xBF, 0x67, 0x3C, 0x70, 0x5E, 0xFF, 0x80,
                0x28, 0xF3, 0xB1, 0x73, 0xB6, 0xFA, 0x7F, 0x56,
                0x2B, 0xE1, 0xDA, 0x4E, 0x27, 0x4E, 0xC2, 0x2F
            });
            addSetting("con_inverse_q", new byte[64] {
                0x28, 0x6A, 0xBB, 0xD1, 0x93, 0x95, 0x94, 0x1A,
                0x6E, 0xED, 0xD7, 0x0E, 0xC0, 0x61, 0x2B, 0xC2,
                0xEF, 0xE1, 0x86, 0x3D, 0x34, 0x12, 0x88, 0x6F,
                0x94, 0xA4, 0x48, 0x6E, 0xC9, 0x87, 0x1E, 0x46,
                0x00, 0x46, 0x00, 0x52, 0x8E, 0x9F, 0x47, 0xC0,
                0x8C, 0xAB, 0xBC, 0x49, 0xAC, 0x5B, 0x13, 0xF2,
                0xEC, 0x27, 0x8D, 0x1B, 0x6E, 0x51, 0x06, 0xA6,
                0xF1, 0x62, 0x1A, 0xEB, 0x78, 0x2E, 0x88, 0x48
            });
            addSetting("con_d", new byte[128]);
            addSetting("con_public_key", new byte[424] {
                0x01, 0xA8, 0x09, 0x12, 0xBA, 0x26, 0xE3, 0x58,
                0x38, 0x30, 0x33, 0x33, 0x39, 0x35, 0x2D, 0x30,
                0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x30, 0x39, 0x2D, 0x31,
                0x38, 0x2D, 0x30, 0x36, 0x00, 0x01, 0x00, 0x01,
                0xC3, 0x2F, 0x8C, 0x91, 0x92, 0x30, 0x6F, 0xDB,
                0xD9, 0x56, 0xC8, 0xC3, 0xC3, 0x20, 0x9D, 0x64,
                0x37, 0xDE, 0x51, 0xE8, 0xD7, 0x1C, 0xE1, 0x56,
                0xF7, 0x74, 0x9D, 0x6F, 0x17, 0x83, 0x7E, 0xB5,
                0x9B, 0xE5, 0xA3, 0xC0, 0x27, 0x90, 0xC2, 0x97,
                0x23, 0xEF, 0x25, 0x6D, 0x00, 0x91, 0x77, 0x24,
                0xCB, 0xC5, 0xD6, 0x30, 0xF4, 0x06, 0xED, 0x24,
                0x5E, 0x23, 0x53, 0x14, 0x18, 0x88, 0xCB, 0x6F,
                0x38, 0x4E, 0xAF, 0x07, 0x0C, 0x61, 0xAB, 0x51,
                0xE7, 0xBE, 0xFA, 0x3F, 0x9E, 0x15, 0x6F, 0x6C,
                0xE0, 0x62, 0xFD, 0x7C, 0x54, 0x55, 0x9E, 0xE0,
                0x5C, 0xAE, 0x86, 0xEF, 0x92, 0x7B, 0x90, 0xD1,
                0xD1, 0xF8, 0x4C, 0xEF, 0x53, 0x4C, 0xD5, 0x4E,
                0x86, 0x58, 0x9B, 0x17, 0x2B, 0x10, 0x05, 0xB8,
                0x90, 0x21, 0xFA, 0xD1, 0x0C, 0x64, 0x19, 0x2B,
                0xA3, 0x1D, 0x6C, 0xE5, 0xFA, 0x95, 0xFD, 0xE8,
                0xF9, 0x70, 0x0D, 0x2A, 0x89, 0x39, 0x9E, 0xD5,
                0x4E, 0x65, 0x87, 0x44, 0xF9, 0x4F, 0x20, 0x90,
                0x89, 0x41, 0x37, 0x50, 0x2E, 0xF8, 0x30, 0x08,
                0xCC, 0x6E, 0xCD, 0xD1, 0x57, 0xE7, 0xC3, 0xB7,
                0x96, 0xB0, 0x2A, 0x80, 0x59, 0xCB, 0x7E, 0x43,
                0xFB, 0xDB, 0x7E, 0x0C, 0xEF, 0x6C, 0x5E, 0x00,
                0x0B, 0x1E, 0x87, 0xE1, 0x02, 0x64, 0xA7, 0x08,
                0x24, 0x32, 0xB9, 0x53, 0x15, 0x00, 0xE9, 0xE3,
                0x53, 0x0C, 0x15, 0xE1, 0x5D, 0x59, 0xC6, 0x09,
                0xAB, 0xD1, 0x73, 0xB5, 0xEE, 0xC5, 0xE7, 0x50,
                0xBC, 0xC2, 0xB2, 0x25, 0x98, 0xBA, 0xA0, 0x0A,
                0x84, 0xF4, 0xF8, 0x2D, 0x1A, 0xD2, 0xC9, 0x7F,
                0xDC, 0xCF, 0x5D, 0x02, 0x21, 0x9A, 0x25, 0xE0,
                0x69, 0x11, 0x6C, 0xFC, 0x88, 0x06, 0x01, 0x49,
                0xF4, 0x74, 0x40, 0x8D, 0xD8, 0x91, 0xDB, 0x83,
                0xC9, 0x60, 0xCE, 0x0D, 0x7F, 0x97, 0xAA, 0x2A,
                0x36, 0xA5, 0xF0, 0x0C, 0x10, 0x63, 0xE9, 0xA9,
                0x39, 0x4F, 0xBB, 0x47, 0x6C, 0x44, 0x22, 0xF1,
                0xBE, 0x3A, 0x49, 0x01, 0xED, 0x5B, 0x47, 0x00,
                0x43, 0x21, 0xBD, 0xFB, 0xB2, 0x95, 0x9A, 0x5F,
                0xB4, 0x46, 0xF4, 0xA7, 0x12, 0x24, 0x4B, 0x0B,
                0x7F, 0xB8, 0x8E, 0xBB, 0x52, 0x83, 0x22, 0x58,
                0x1E, 0x06, 0xB7, 0xAD, 0x7A, 0x3A, 0x16, 0x7E,
                0xC8, 0xD7, 0x37, 0x81, 0x9E, 0x8A, 0xF2, 0xC4,
                0x66, 0x08, 0x88, 0xFE, 0xA7, 0x0E, 0x8F, 0x9D,
                0x87, 0x5F, 0x0E, 0x7B, 0x48, 0x9A, 0x06, 0x62,
                0xF7, 0x24, 0x25, 0xCD, 0xB0, 0x4F, 0x73, 0x68,
                0x97, 0x0C, 0xE4, 0xAD, 0xE8, 0x55, 0x9A, 0xB4,
                0xFA, 0x65, 0xB5, 0xA3, 0x58, 0xFE, 0x81, 0x40,
                0x54, 0xAA, 0x1F, 0x00, 0x2A, 0xF1, 0xDD, 0x8A,
                0x1F, 0x45, 0x4E, 0x9D, 0xFF, 0x82, 0x46, 0x5A,
                0x5A, 0x90, 0x25, 0xA0, 0x58, 0x0F, 0xF2, 0x27
            });
            #if PNET
                addSetting("con_exponent_dev", new byte[4] { 0x00, 0x01, 0x00, 0x01 });
                addSetting("con_modulus_dev", new byte[128] {
                    0xBC, 0xB1, 0x25, 0x90, 0x43, 0x9A, 0x14, 0x74,
                    0xEC, 0x0E, 0x30, 0x27, 0xF3, 0xE3, 0xE8, 0x53,
                    0x47, 0x2B, 0xE8, 0x24, 0xCC, 0xEC, 0x3E, 0x87,
	                0x47, 0x1F, 0x93, 0x21, 0x49, 0xB3, 0x60, 0x67,
                    0x49, 0xF1, 0x6A, 0xBF, 0x0D, 0x70, 0x15, 0x01,
                    0xF6, 0xEB, 0x78, 0x41, 0xBF, 0x9B, 0x2F, 0xD9,
	                0xB4, 0x07, 0x08, 0x82, 0x40, 0xC3, 0x82, 0x97,
                    0x9B, 0xFF, 0xD7, 0xA8, 0x18, 0xE7, 0x5B, 0xC3,
                    0x10, 0xB2, 0xF5, 0xD0, 0xC6, 0xC5, 0x22, 0x08,
	                0x86, 0xA2, 0x94, 0xB1, 0xEB, 0x7E, 0xD2, 0x82,
                    0x3C, 0x08, 0xEA, 0x7F, 0xA5, 0x3B, 0xA9, 0x86,
                    0x51, 0x2A, 0x5B, 0x4D, 0x5C, 0xFF, 0xA4, 0x75,
	                0x24, 0xF7, 0x91, 0x79, 0xC7, 0x9A, 0x52, 0x1C,
                    0xAB, 0x9A, 0x1C, 0x99, 0xED, 0xB7, 0xB2, 0x8A,
                    0xFD, 0xC7, 0x87, 0xF0, 0x82, 0x9A, 0x83, 0x42,
	                0x83, 0x26, 0x6F, 0x4B, 0x4A, 0x14, 0x65, 0xB9
                });
                addSetting("con_p_dev", new byte[64] {
                    0xD9, 0x25, 0x79, 0x1D, 0x4E, 0xF0, 0xEC, 0xCF,
                    0xD4, 0x28, 0x85, 0x88, 0x29, 0x21, 0x01, 0xE9, 
                    0x31, 0x1B, 0x64, 0x00, 0xFE, 0xD3, 0x7F, 0x49,
	                0xB8, 0x49, 0x49, 0x02, 0x72, 0xB7, 0x54, 0x93, 
                    0xC4, 0x95, 0x85, 0x6C, 0xC2, 0xE7, 0xBC, 0x7E, 
                    0x18, 0xC8, 0xF3, 0x54, 0xEE, 0xD7, 0xE8, 0x74,
	                0xA3, 0xAC, 0x64, 0x39, 0xF1, 0x8E, 0xEE, 0x3A, 
                    0xFD, 0x15, 0xAD, 0x71, 0xEE, 0x74, 0xC4, 0xB7
                });
                addSetting("con_q_dev", new byte[64] {
                    0xDE, 0x74, 0x4D, 0x48, 0xBC, 0x81, 0xA9, 0xE6, 
                    0x66, 0x09, 0x6E, 0x1C, 0xF0, 0x87, 0x4E, 0x6E, 
                    0xD2, 0x2D, 0x41, 0xFB, 0x4D, 0x69, 0xDC, 0x82,
	                0x35, 0x8D, 0x74, 0x87, 0x86, 0xD1, 0x26, 0x21, 
                    0x9C, 0xCE, 0x77, 0x0A, 0x95, 0xC6, 0xF7, 0x6C, 
                    0x34, 0xFD, 0xC0, 0xE4, 0x04, 0xCC, 0x25, 0xEA,
	                0xDF, 0x07, 0xE8, 0x1B, 0x88, 0x7C, 0xFE, 0x89, 
                    0x60, 0x4E, 0xE8, 0x29, 0xD5, 0x31, 0x19, 0x0F
                });
                addSetting("con_dp_dev", new byte[64] {
                    0x3C, 0x7A, 0x78, 0x62, 0x16, 0x53, 0x79, 0xD1,
                    0x64, 0x88, 0xA8, 0xB0, 0x44, 0xAC, 0x41, 0xC8, 
                    0xFD, 0xF9, 0x5F, 0xFF, 0xFA, 0xF9, 0x52, 0xF1,
	                0x68, 0x57, 0x58, 0xF3, 0x4A, 0x9A, 0x0E, 0xFF, 
                    0x5C, 0xF8, 0x3C, 0x02, 0x0F, 0xC2, 0xD5, 0x37, 
                    0xD5, 0x95, 0x5A, 0x58, 0x64, 0x71, 0x53, 0xF7,
	                0xF0, 0x82, 0x1A, 0x24, 0x1D, 0x48, 0x2E, 0xC7, 
                    0xD5, 0x27, 0x4D, 0x78, 0x76, 0xEE, 0xA4, 0xBF
                });
                addSetting("con_dq_dev", new byte[64] {
                    0x7E, 0x96, 0x94, 0x3C, 0x25, 0xF9, 0x6B, 0x63,
                    0x8F, 0x01, 0x22, 0xC6, 0x19, 0x22, 0x06, 0x42, 
                    0x0E, 0x1C, 0x6F, 0x05, 0xC0, 0xA1, 0xD3, 0x37,
	                0xCD, 0x9D, 0xB7, 0x88, 0x3F, 0xF1, 0xD8, 0xCF, 
                    0x1B, 0xDA, 0x69, 0xE7, 0x7E, 0x20, 0x01, 0x40, 
                    0x74, 0x4F, 0x4A, 0x6A, 0xF7, 0x47, 0xEC, 0xF3,
	                0xE1, 0x03, 0x30, 0xD4, 0x2A, 0x31, 0x66, 0xEF, 
                    0x69, 0xFC, 0xBD, 0x24, 0xC1, 0x0A, 0xF5, 0x85
                });
                addSetting("con_inverse_q_dev", new byte[64] {
                    0x91, 0x4E, 0x54, 0x5F, 0x6C, 0x2A, 0xBD, 0xCC,
                    0xA9, 0x9E, 0x31, 0xC8, 0x38, 0xFC, 0xED, 0x6F, 
                    0xD9, 0xD4, 0x82, 0xFF, 0x5E, 0x53, 0x5C, 0xD4, 
	                0x98, 0xCE, 0x4A, 0xF5, 0xE1, 0x6B, 0x82, 0xC1, 
                    0x23, 0xDF, 0x88, 0xF2, 0xC3, 0xC8, 0xFB, 0xA6, 
                    0xCD, 0x3C, 0xF8, 0xAD, 0x8E, 0xCE, 0xC1, 0xA5, 
	                0xC9, 0x2A, 0x07, 0x3C, 0xAE, 0x96, 0x90, 0xAF, 
                    0x54, 0x3E, 0x1F, 0x39, 0x8B, 0x75, 0x7E, 0x19
                });
                addSetting("con_d_dev", new byte[128]);
                addSetting("con_public_key_dev", new byte[424] {
                    0x01, 0xA8, 0xE6, 0x0F, 0x91, 0xF0, 0x19, 0x31,
                    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 
                    0x30, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	                0x80, 0x00, 0x00, 0x01, 0x01, 0xC5, 0xEF, 0x5C, 
                    0x58, 0xAA, 0x1B, 0x60, 0x00, 0x01, 0x00, 0x01, 
                    0x83, 0x26, 0x6F, 0x4B, 0x4A, 0x14, 0x65, 0xB9,
	                0xFD, 0xC7, 0x87, 0xF0, 0x82, 0x9A, 0x83, 0x42, 
                    0xAB, 0x9A, 0x1C, 0x99, 0xED, 0xB7, 0xB2, 0x8A, 
                    0x24, 0xF7, 0x91, 0x79, 0xC7, 0x9A, 0x52, 0x1C,
	                0x51, 0x2A, 0x5B, 0x4D, 0x5C, 0xFF, 0xA4, 0x75, 
                    0x3C, 0x08, 0xEA, 0x7F, 0xA5, 0x3B, 0xA9, 0x86, 
                    0x86, 0xA2, 0x94, 0xB1, 0xEB, 0x7E, 0xD2, 0x82,
	                0x10, 0xB2, 0xF5, 0xD0, 0xC6, 0xC5, 0x22, 0x08, 
                    0x9B, 0xFF, 0xD7, 0xA8, 0x18, 0xE7, 0x5B, 0xC3, 
                    0xB4, 0x07, 0x08, 0x82, 0x40, 0xC3, 0x82, 0x97,
	                0xF6, 0xEB, 0x78, 0x41, 0xBF, 0x9B, 0x2F, 0xD9, 
                    0x49, 0xF1, 0x6A, 0xBF, 0x0D, 0x70, 0x15, 0x01, 
                    0x47, 0x1F, 0x93, 0x21, 0x49, 0xB3, 0x60, 0x67,
	                0x47, 0x2B, 0xE8, 0x24, 0xCC, 0xEC, 0x3E, 0x87, 
                    0xEC, 0x0E, 0x30, 0x27, 0xF3, 0xE3, 0xE8, 0x53, 
                    0xBC, 0xB1, 0x25, 0x90, 0x43, 0x9A, 0x14, 0x74,
	                0x19, 0x5E, 0xDC, 0x8F, 0x49, 0x59, 0x37, 0xC8, 
                    0x30, 0x8E, 0x29, 0x59, 0xE7, 0x27, 0x0D, 0x2E,
                    0xB0, 0x9F, 0x3F, 0x87, 0x61, 0x55, 0x29, 0xFE,
	                0xC9, 0x77, 0x55, 0xCD, 0x82, 0x8B, 0x69, 0x3C, 
                    0x6E, 0x16, 0x0C, 0x16, 0x5B, 0x2D, 0xA6, 0x71, 
                    0x8B, 0xED, 0x98, 0xFD, 0x26, 0xAF, 0x27, 0x22,
	                0x81, 0xD7, 0x0F, 0x33, 0x68, 0x79, 0xDC, 0xAC, 
                    0xE0, 0xDF, 0x89, 0x78, 0x03, 0x95, 0xE6, 0x41, 
                    0x9F, 0x2B, 0xE8, 0xEF, 0xF9, 0xD7, 0x5B, 0x26,
	                0x88, 0x81, 0xDA, 0xEA, 0x8C, 0xEB, 0x40, 0x93, 
                    0xAA, 0x99, 0xF6, 0xED, 0xFF, 0x74, 0xDA, 0x49, 
                    0xFB, 0xE0, 0x97, 0xA9, 0x1D, 0x64, 0x9D, 0xDA,
	                0xF0, 0x19, 0x92, 0x09, 0xA7, 0xA9, 0xFB, 0xC0, 
                    0x08, 0xB5, 0xD4, 0x61, 0xCC, 0xCD, 0x8F, 0xF8, 
                    0x13, 0x4F, 0xD5, 0x77, 0x1C, 0x14, 0x24, 0x6F,
	                0x3B, 0x25, 0xB4, 0x50, 0xCA, 0x4D, 0xF9, 0x62, 
                    0xCD, 0xB5, 0xC3, 0x04, 0x8A, 0xD6, 0x29, 0x9F, 
                    0x6F, 0x3B, 0x95, 0xB1, 0xE6, 0xAF, 0xBA, 0xD2,
	                0x20, 0x9B, 0x42, 0x66, 0x16, 0x7E, 0x6E, 0x7E, 
                    0xE0, 0xAD, 0xD5, 0x9A, 0x21, 0xBF, 0x61, 0xCC, 
                    0x98, 0xAC, 0xDF, 0x8D, 0xF8, 0xA7, 0x37, 0xDD,
	                0x87, 0x05, 0x07, 0x42, 0x25, 0x30, 0xA9, 0x33, 
                    0x92, 0x05, 0x2B, 0x80, 0x4E, 0x04, 0x54, 0xA7, 
                    0x80, 0x7D, 0xE8, 0x97, 0x0D, 0x09, 0x78, 0x4D,
	                0x4E, 0x1E, 0x88, 0xA6, 0x94, 0x57, 0xC6, 0xE7, 
                    0x0E, 0xE8, 0xFA, 0x0A, 0x83, 0xD2, 0xE6, 0x02, 
                    0x31, 0x1D, 0xBF, 0x73, 0x41, 0x2D, 0x65, 0x76,
	                0x29, 0x77, 0x96, 0x2F, 0xED, 0xBA, 0x98, 0xE9, 
                    0xCD, 0x8C, 0x25, 0x67, 0xAF, 0x72, 0xC1, 0x5A,
                    0x39, 0x9D, 0x86, 0x59, 0xE8, 0xD9, 0xC6, 0x3E,
	                0x16, 0xD1, 0x93, 0xC0, 0x59, 0xBA, 0x27, 0x59,
                    0x42, 0x60, 0x88, 0x9E, 0x33, 0xE5, 0x25, 0x58
                });
            #endif
        }

        internal static RSAParameters getCONKeys()
        {
            RSAParameters keys = new RSAParameters();
            keys.Exponent = (byte[])getSetting("con_exponent" + devTag);
            keys.Modulus = (byte[])getSetting("con_modulus" + devTag);
            keys.P = (byte[])getSetting("con_p" + devTag);
            keys.Q = (byte[])getSetting("con_q" + devTag);
            keys.DP = (byte[])getSetting("con_dp" + devTag);
            keys.DQ = (byte[])getSetting("con_dq" + devTag);
            keys.InverseQ = (byte[])getSetting("con_inverse_q" + devTag);
            keys.D = (byte[])getSetting("con_d" + devTag);
            return keys;
        }

        internal static byte[] getPublicKey()
        {
            return (byte[])getSetting("con_public_key" + devTag);
        }

        // Load the settings that the framework stores for us.
        private static void loadDotNETSettings()
        {
            Settings.Default.Reload();
            if (Settings.Default.FirstRun)
            {
                try { Settings.Default.Upgrade(); } catch { }
                Settings.Default.FirstRun = false;
                Settings.Default.Save();
            }
            ProfileManager.InitializeCache();
        }

        private static StringCollection getEmptyIDSet()
        {
            StringCollection set = new StringCollection();
            set.AddRange(new string[] { String.Empty, String.Empty, String.Empty });
            return set;
        }

        // Adds a setting to the dictionary with a string key. Accepts any data type.
        internal static void addSetting(string key, object value)
        {
            if (settingExists(key))
                settings[key] = value;
            else
                settings.Add(key, value);
        }

        // Check if a setting exists based on the given key.
        internal static bool settingExists(string key)
        {
            return settings.ContainsKey(key);
        }

        // Retrieve settings using a string key.
        internal static object getSetting(string key)
        { 
            return settings[key];
        }

        // Removes the given key from the dictionary.
        internal static void removeSetting(string key)
        {
            if (settingExists(key))
                settings.Remove(key);
        }

        // Add or change a setting. Sent from the server.
        internal static void caseSetting(XPathNavigator nav)
        {
            string value = nav.Value;
            nav.MoveToFirstAttribute();
            string key = nav.Value;
            nav.MoveToNextAttribute();
            switch (nav.Value)
            {
                case "string":
                    addSetting(key, value);
                    break;
                case "string_array":
                    addSetting(key, value.Substring(1).Split(value[0]));
                    break;
                case "char":
                    addSetting(key, value[0]);
                    break;
                case "base64":
                    addSetting(key, Functions.Global.base64Decode(value));
                    break;
                case "int":
                    addSetting(key, int.Parse(value));
                    break;
                case "bool":
                    addSetting(key, bool.Parse(value));
                    break;
                default:
                    addSetting(key, value);
                    break;
            }
            nav.MoveToParent();
        }
    }
}
